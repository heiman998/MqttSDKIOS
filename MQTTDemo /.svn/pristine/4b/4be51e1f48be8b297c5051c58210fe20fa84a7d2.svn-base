//
//  HMHttpTool.m
//  HmMqttSdk
//
//  Created by 研发ios工程师 on 2017/12/22.
//  Copyright © 2017年 mac. All rights reserved.
//

#import "HMHttpTool.h"
#import <AFNetworking.h>
#import <UIKit+AFNetworking.h>

static HMHttpTool *manager = nil;
static AFHTTPSessionManager *afnManager = nil;

@implementation HMHttpTool

+ (instancetype)manager {
    
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        manager = [[HMHttpTool alloc] init];
    });
    return manager;
}


-(instancetype)init{
    if (self = [super init]) {
        afnManager = [AFHTTPSessionManager manager];
        afnManager.requestSerializer.stringEncoding = NSUTF8StringEncoding;
        [afnManager.requestSerializer setTimeoutInterval:10];
        afnManager.requestSerializer =  [AFJSONRequestSerializer serializer];//申明请求的数据是json类型
        afnManager.responseSerializer = [AFHTTPResponseSerializer serializer];//申明返回的结果是json类型
        afnManager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"application/json",@"text/json", @"text/plain", @"text/html", nil];
    }
    return self;
}

/**
 *  基础post方法请求网络数据
 *
 *  @param url         请求网址路径
 *  @param parameters  请求参数
 *  @param success     成功回调
 *  @param failure     失败回调
 */
-(void)postDataWithUrl:(NSString *)url
            parameters:(NSDictionary *)parameters
               success:(void (^)(id responseObject))success
               failure:(void (^)(NSError *error))failure{
    if ([parameters valueForKey:@"password"]) {
        [afnManager.requestSerializer  setValue:@"application/json; charset=utf-8" forHTTPHeaderField:@"Content-Type"];
    }else{
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        NSString * access_token  = [defaults objectForKey:@"HM_access_token"];
        [afnManager.requestSerializer setValue:access_token  forHTTPHeaderField:@"Access-token"];
    }
    [afnManager POST:url parameters:parameters progress:^(NSProgress * _Nonnull uploadProgress) {
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (responseObject) {
            success(responseObject);
        }else {
            success(nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (error) {
            failure(error);
        }
    }];
}

/**
 *  基础get方法请求网络数据（不带请求头）
 *
 *  @param url         请求网址路径
 *  @param parameters  请求参数
 *  @param success     成功回调
 *  @param failure     失败回调
 */
-(void)getDataWithUrl:(NSString *)url
           parameters:(NSDictionary *)parameters
              success:(void (^)(id responseObject))success
              failure:(void (^)(NSError *error))failure{
    
    [afnManager GET:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) {
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (responseObject) {
            success(responseObject);
        }else {
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (error) {
            failure(error);
        }
    }];
}
/**
 *  基础get方法请求网络数据
 *
 *  @param url         请求网址路径
 *  @param header      请求头
 *  @param parameters  请求参数
 *  @param success     成功回调
 *  @param failure     失败回调
 */
-(void)getDataWithUrl:(NSString *)url
               header:(NSString *)header
           parameters:(NSDictionary *)parameters
              success:(void (^)(id responseObject))success
              failure:(void (^)(NSError *error))failure{
    
    [afnManager.requestSerializer setValue:header  forHTTPHeaderField:@"Access-token"];
    [afnManager GET:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) {
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (responseObject) {
            success(responseObject);
        }else {
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (error) {
            failure(error);
        }
    }];
}
/**
 *  基础delete方法请求网络数据
 *
 *  @param url         请求网址路径
 *  @param parameters  请求参数
 *  @param success     成功回调
 *  @param failure     失败回调
 */
-(void)deleteDataWithUrl:(NSString *)url
              parameters:(NSDictionary *)parameters
                 success:(void (^)(id responseObject))success
                 failure:(void (^)(NSError *error))failure{
    
    [afnManager DELETE:url parameters:parameters success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (responseObject) {
            success(responseObject);
        }else {
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (error) {
            failure(error);
        }
    }];
}
/**
 *  基础delete方法请求网络数据
 *
 *  @param url         请求网址路径
 *  @param header      请求头
 *  @param parameters  请求参数
 *  @param success     成功回调
 *  @param failure     失败回调
 */
-(void)deleteDataWithUrl:(NSString *)url
                  header:(NSString *)header
              parameters:(NSDictionary *)parameters
                 success:(void (^)(id responseObject))success
                 failure:(void (^)(NSError *error))failure{
    
    [afnManager.requestSerializer setValue:header  forHTTPHeaderField:@"Access-token"];
    [afnManager DELETE:url parameters:parameters success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (responseObject) {
            success(responseObject);
        }else {
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (error) {
            failure(error);
        }
    }];
}



@end
