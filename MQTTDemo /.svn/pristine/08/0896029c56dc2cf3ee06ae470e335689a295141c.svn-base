//
//  HmEncrypt.m
//  CTest
//
//  Created by haimen_ios_imac on 2017/5/18.
//  Copyright © 2017年 深圳海曼科技有限公司. All rights reserved.
//

#import "HmEncrypt.h"
#import "aes128.h"


@implementation HmEncrypt


//+ (NSData *)aesEncrypt:(NSData *)data key:(NSData *)key
//{
//    //char OutBase64[] = "gC+Tlws/PHqzO7MT4OWwngkiyeNyku8gURQc/0M/O4BQpijLXrXbjAl3Wpmc7B5OTJy8guTuK1hABfCSXkxdwpPO21saWLDO3axRWy5Gp0ep85Hfr4HZSJ5R4s511EWlaTWlIeEbY1lUg5yNdQ1ocqj1W+EVEYQWDSrVkT5eYcC7KIM5u7pXjfoQbPwQYbeYkDk5gZGEHywETA+kVyKnPS34MhMbqwEespzNoTZbNHrdT6t1Q3rZzte/3FKmftG5DAIs8SRjhognKabwWEDeyjZ9AnAmUbrwi734AF8bowfZRairBSJ4IkPggd3k+DfOL3PlG1iA8iefKin4dk5V62UU8Uoy2/2SYrJF8Iabt8/dS97KIAubYDKD62Elerjc98Y9Kh9MRpglCUFet8ldi3K9vw83zK9DoiTApBjuZWY=";
//
//    Byte *keyByte = (Byte *)[key bytes];
//    unsigned int len;
//    Byte *bytes = (Byte *)[data bytes];
//    unsigned int len_byte = (unsigned int)[data length];
//    unsigned char byteOut[len_byte + 16];
//    len = EncryptBuf(bytes, len_byte, byteOut, keyByte);
//    NSData *encryptData = [[NSData alloc] initWithBytes:byteOut length:len];
//    NSData *retData = [encryptData base64EncodedDataWithOptions:0];
//    //base64_encode(byteOut, OutBase64, len);
////    NSData *encryptData = [NSData dataWithBytes:OutBase64 length:sizeof(OutBase64)];
//    return retData;
//}


//解密 
+ (NSData *)aesDecrypt:(NSData *)data key:(NSData *)key blackLen:(int)bLen
{
//    NSString *retString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
//    NSData *resultData = [[NSData alloc] initWithBase64EncodedString:retString options:NSDataBase64DecodingIgnoreUnknownCharacters];
//    NSLog(@"str-------- \n %@  %ld", resultData, resultData.length);
//    NSString *str = [[NSString alloc] initWithData:resultData encoding:NSUTF8StringEncoding];
    
    Byte *keyByte = (Byte *)[key bytes];
    unsigned int len;
    unsigned int lengtha = bLen;
    //Byte *byte111 = (Byte *)[data bytes];
    //unsigned char Out2Base64[lengtha + 16];
    unsigned char byteOut2[lengtha + 16];
//    len = base64_decode(byte111, Out2Base64);
    len = DecryptBuf( (Byte *)[data bytes], bLen, byteOut2, keyByte);
    //printf(" ----aesDecrypt----- \n %d %s ",len,  byteOut2);
    NSData *decodeData = [NSData dataWithBytes:byteOut2 length:len];
    
//    NSString *str = [[NSString alloc] initWithBytes:byteOut2 length:len encoding:NSUTF8StringEncoding];
    return decodeData;
}

+ (unsigned char *)getKey:(unsigned char *)lpKey
{
    unsigned char rand[256] =
    {
        //16*16矩阵
        0x33,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x06,0x33
    };
    HMMakeKey(rand, lpKey);

    return lpKey;
}

//+ (id)hmDecryptWithPrivateKey:(NSString *)key payData:(NSData *)payData
//{
////    NSString *strBefore = [[NSString alloc] initWithData:payData encoding:NSUTF8StringEncoding];
//    //NSLog(@"解密KEY -------------------------：%@   字符串---%@---%ld", key, strBefore, (unsigned long)[payData length]);
//
//    if (!key) return nil;
////    NSString *payDataString = [[NSString alloc] initWithData:payData encoding:NSUTF8StringEncoding];
////    payDataString = [payDataString stringByReplacingOccurrencesOfString:@"^" withString:@""];
////    payDataString = [payDataString stringByReplacingOccurrencesOfString:@"&" withString:@""];
//    //NSLog(@"去除特殊符号字符串---------------------------%@", payDataString);
//    //NSData *valueData = [payDataString dataUsingEncoding:NSUTF8StringEncoding];
//
//    NSData *subData = [payData subdataWithRange:NSMakeRange(1, [payData length]-2)];
//    //NSString *strAfter = [[NSString alloc] initWithData:subData encoding:NSUTF8StringEncoding];
//    //NSLog(@"去除前后数据 -------------------------：%@   %ld", strAfter, (unsigned long)[subData length]);
//
//    NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];
//    NSData *deData = [HmEncrypt aesDecrypt:subData key:keyData];
//
//    //NSData *deData = [HmEncrypt aesDecrypt:valueData key:keyData];
//
//    NSString *deDataStrAfter = [[NSString alloc] initWithData:deData encoding:NSUTF8StringEncoding];
//    NSLog(@"解密后数据数据 -------------------------：%@ ", deDataStrAfter);
//
//    //NSError *error2 = nil;
//    //NSError *error3 = nil;
//    NSError *error = nil;
////    id dict = [[JSONDecoder decoder] objectWithData:deData error:&error];
//    //id dict2 = [[JSONDecoder decoder] objectWithData:deData2 error:&error2];
//
//    //[NSJSONSerialization JSONObjectWithData:deData2 options:NSJSONReadingAllowFragments error:&error3];
//    //id dict = [NSJSONSerialization JSONObjectWithData:deData options:NSJSONReadingMutableContainers error:&error];
//
//
////    NSLog(@"解密完成字典数据：------------------------- %@", dict);
//    /*
//    NSLog(@"-------hmDecryptWithPrivateKey---------:\n  %@ \n  %@ \n %@ \n  %@  \n %@ \n %@",
//          key,
//          strBefore,
//          strAfter,
//          deDataStrAfter,
//          dict,
//          error);
//    */
//    return dict;
//}

//+ (id)hmEncrypt:(NSString *)key jsonData:(NSDictionary *)jsonDict
//{
//    if (!key || !jsonDict) {
//        return nil;
//    }
//    //@"^" @"&"
//    NSError *error = nil;
//    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonDict options:0 error:&error];
//    if (error) {
//        return nil;
//    }
//    NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];
//    NSData *encryptData = [HmEncrypt aesEncrypt:jsonData key:keyData];
//    NSString *str = [[NSString alloc] initWithData:encryptData encoding:NSUTF8StringEncoding];
//    NSString *newStr = [NSString stringWithFormat:@"^%@&", str];
//    NSData *finalData = [newStr dataUsingEncoding:NSUTF8StringEncoding];
//    return finalData;
//}

//+ (NSData *)hmEncrypt:(NSString *)key andData:(NSData *)data blackLen:(int)bLen
//{
//    if (!key || !data) {
//        return nil;
//    }
//    //@"^" @"&"
//    NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];
//    NSData *encryptData = [HmEncrypt aesEncrypt:data key:keyData blackLen:bLen];
////    NSString *str = [[NSString alloc] initWithData:encryptData encoding:NSUTF8StringEncoding];
////    NSString *newStr = [NSString stringWithFormat:@"^%@&", str];
////    NSData *finalData = [newStr dataUsingEncoding:NSUTF8StringEncoding];
//    return encryptData;
//}
//加密
+ (NSData *)aesEncrypt:(NSData *)data key:(NSData *)key blackLen:(int)bLen
{
    //char OutBase64[] = "gC+Tlws/PHqzO7MT4OWwngkiyeNyku8gURQc/0M/O4BQpijLXrXbjAl3Wpmc7B5OTJy8guTuK1hABfCSXkxdwpPO21saWLDO3axRWy5Gp0ep85Hfr4HZSJ5R4s511EWlaTWlIeEbY1lUg5yNdQ1ocqj1W+EVEYQWDSrVkT5eYcC7KIM5u7pXjfoQbPwQYbeYkDk5gZGEHywETA+kVyKnPS34MhMbqwEespzNoTZbNHrdT6t1Q3rZzte/3FKmftG5DAIs8SRjhognKabwWEDeyjZ9AnAmUbrwi734AF8bowfZRairBSJ4IkPggd3k+DfOL3PlG1iA8iefKin4dk5V62UU8Uoy2/2SYrJF8Iabt8/dS97KIAubYDKD62Elerjc98Y9Kh9MRpglCUFet8ldi3K9vw83zK9DoiTApBjuZWY=";
    
    if (!key || !data) {
        return nil;
    }
    Byte *keyByte = (Byte *)[key bytes];
    unsigned int len;
    Byte *bytes = (Byte *)[data bytes];
    //unsigned int len_byte = (unsigned int)[data length];
    unsigned int lengtha = bLen ;
    unsigned char byteOut[lengtha + 16];
    len = EncryptBuf(bytes, bLen, byteOut, keyByte);
    NSData *encryptData = [[NSData alloc] initWithBytes:byteOut length:len];
    // NSData *retData = [encryptData base64EncodedDataWithOptions:0];
    //base64_encode(byteOut, OutBase64, len);
    // NSData *encryptData = [NSData dataWithBytes:OutBase64 length:sizeof(OutBase64)];
    return encryptData ;
}


//static NSString *const KEY = @"HKSGKGGJJGFKSDHG";
//static NSString *const ENCRYPTSTRING = @"ABCDEFG";
//+ (NSData *)aesTestEncrypt:(NSString *)encryString
//{
//    //NSString *str = @"ABCDEFG";
//    if (!encryString) {
//        encryString = [ENCRYPTSTRING copy];
//    }
//    NSData *strData = [encryString dataUsingEncoding:NSUTF8StringEncoding];
//    NSData *keyData = [KEY dataUsingEncoding:NSUTF8StringEncoding];
//    
//    Byte *keyByte = (Byte *)[keyData bytes];
//    unsigned int len;
//    Byte *strBytes = (Byte *)[strData bytes];
//    unsigned int len_byte = (unsigned int)[strData length];
//    unsigned char byteOut[len_byte];
//    len = EncryptBuf(strBytes, len_byte, byteOut, keyByte);
//    NSData *encryptData = [[NSData alloc] initWithBytes:byteOut length:len];
//    return encryptData;
//}
//
//
//+ (NSData *)aesTestDecrypt:(NSData *)decryptData
//{
//    NSData *keyData = [KEY dataUsingEncoding:NSUTF8StringEncoding];
//    
//    Byte *keyByte = (Byte *)[keyData bytes];
//    unsigned int len;
//    unsigned int lengtha = (int)[decryptData length];
//    //Byte *byte111 = (Byte *)[data bytes];
//    //unsigned char Out2Base64[lengtha + 16];
//    unsigned char byteOut2[lengtha];
//    //len = base64_decode(byte111, Out2Base64);
//    len = DecryptBuf( (Byte *)[decryptData bytes], lengtha, byteOut2, keyByte);
//    //printf(" ----aesDecrypt----- \n %d %s ",len,  byteOut2);
//    NSData *decodeData = [NSData dataWithBytes:byteOut2 length:len];
//    
//   NSString *str = [[NSString alloc] initWithBytes:byteOut2 length:len encoding:NSUTF8StringEncoding];
//    
//    NSLog(@"解密数据结果：%@", str);
//    
//    return decodeData;
//}



//+ (NSData *)aesDecrypt:(NSData *)data key:(NSData *)key blackLen:(int)bLen
//{
//    //    NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding (kCFStringEncodingGB_18030_2000);
//    //    NSString *retString=[[NSString alloc]initWithData:data encoding:enc];
//
//    //    NSString *retString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
//
//    //    NSData *resultData = [[NSData alloc] initWithBase64EncodedString:retString options:NSDataBase64DecodingIgnoreUnknownCharacters];
//
//    //    NSLog(@"str-------- \n %@  %ld", resultData, resultData.length);
//    //    NSString *str = [[NSString alloc] initWithData:resultData encoding:NSUTF8StringEncoding];
//    return decodeData;
//}

@end
