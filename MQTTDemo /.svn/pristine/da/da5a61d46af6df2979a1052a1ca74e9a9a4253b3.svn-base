//
//  SubDeviceViewController.m
//  MQTTHJ
//
//  Created by 研发ios工程师 on 2018/1/4.
//  Copyright © 2018年 研发ios工程师. All rights reserved.
//

#import "SubDeviceViewController.h"

@interface SubDeviceViewController ()<HMMQTTDelegate>

@property (nonatomic, strong) NSDictionary * dict;
@property (nonatomic, strong) NSString *  productId;
@property (nonatomic, strong) NSString *  subIndex;
@property (nonatomic, strong) HMMQTTSdkEncoder * encoder;
@property (nonatomic, strong) HMDevice *  hmDevice;


@end

@implementation SubDeviceViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.encoder = [[HMMQTTSdkEncoder alloc]init];
    self.hmDevice = [[HMDevice alloc]init];
    self.encoder = [[HMMQTTSdkEncoder alloc]init];
    [HMMqttManager manager].delegate = self;
}

- (void)configureWithData:(id)data {
    self.dict = data;
    self.productId = [data valueForKey:@"productId"];
    self.subIndex  = [data valueForKey:@"subIndex"];
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [[HMMqttManager manager] subscribeLastWordsWithHmDevice:self.hmDevice andHmMqttError:^(NSError *error) {
                if (error) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [self.view makeToast:@"订阅失败"];
                    });
                }else{
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [self.view makeToast:@"订阅成功"];
                    });
                }
            }] ;
        });
    });
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [[HMMqttManager manager] subscribeWithHmDevice:self.hmDevice andHmMqttError:^(NSError *error) {
                if (error) {
                    NSLog(@"订阅主题失败");
                }else{
                    NSLog(@"订阅主题成功");
                }
            }] ;
        });
    });
}

-(void)mqttNewMessageData:(NSData *)data{
    
}


- (IBAction)senMqtt:(id)sender {
    [self setSubDeviceWithProductId:self.productId andSubIndex:self.subIndex];
}

-(void)setSubDeviceWithProductId:(NSString *)productId andSubIndex:(NSString *)subIndex{
    NSInteger deviceId = [productId  integerValue];
    NSInteger index = [subIndex integerValue];
    switch (deviceId) {
        case DEVICE_TYPE_ZIGBEE_RGB:
            NSLog(@"rgb");
            break;
        case DEVICE_TYPE_ZIGBEE_ONE_ONOFF:
            NSLog(@"1onoff");
            break;
        case DEVICE_TYPE_ZIGBEE_TWO_ONOFF:
            NSLog(@"2onoff");
            break;
        case DEVICE_TYPE_ZIGBEE_THREE_ONOFF:
            NSLog(@"3onoff");
            break;
        case DEVICE_TYPE_ZIGBEE_RC:
            NSLog(@"RC");
            break;
        case DEVICE_TYPE_ZIGBEE_RELAY:
            NSLog(@"RELAY");
            break;
        case DEVICE_TYPE_ZIGBEE_FOUR_WHEEL:
            NSLog(@"FOUR_WHEEL");
            break;
        case DEVICE_TYPE_ZIGBEE_SOUND_AND_LIGHT_ALARM:
            NSLog(@"SOUND_AND_LIGHT_ALARM");
            break;
        case DEVICE_TYPE_ZIGBEE_THP:
            NSLog(@"THP");
            break;
        case DEVICE_TYPE_ZIGBEE_METRTING_PLUGIN:
            NSLog(@"METRTING_PLUGIN");
            
            break;
        case DEVICE_TYPE_ZIGBEE_PLUGIN:
            NSLog(@"PLUGIN");
            break;
        case DEVICE_TYPE_ZIGBEE_CO:
            NSLog(@"设备类型：CO 一氧化碳探测器");
            [self COAndIndex:index];
            break;
        default:
            break;
    }
}

- (void)metringPlugAndIndex:(NSString *)subIndex{
    
}
//一氧化碳探测器
- (void)COAndIndex:(NSInteger )index{
    NSData * data = [self.encoder getSubDevice:self.hmDevice andIndex:index andCmd:GW_SUB_SE_GET];
    [[HMMqttManager manager] publishWithData:data onHmDevice:self.hmDevice];
}
- (void)dealloc {
    [HMMqttManager manager].delegate = nil;
    [[HMMqttManager manager] unsubscribeWithHmDevice:self.hmDevice andHmMqttError:^(NSError *error) {
    }];
}


@end
