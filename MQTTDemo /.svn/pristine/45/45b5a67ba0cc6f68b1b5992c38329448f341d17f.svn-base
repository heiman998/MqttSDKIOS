//
//  HMMqttManager.m
//  HmMqttSdk
//
//  Created by 研发ios工程师 on 2018/1/4.
//  Copyright © 2018年 mac. All rights reserved.
//

#import "HMMqttManager.h"
#import "HJMqttManager.h"
#import "HmUtils.h"
#import "HMMQTTSdkDecoder.h"
#import "HMMQTTSdkEncoder.h"

@interface HMMqttManager () <HJMQTTManagerDelegate>

@property (nonatomic, copy) void (^dataComplete) (id data);
@property (nonatomic, strong)HMMQTTSdkEncoder * encoder;

@end

@implementation HMMqttManager

-(HMMQTTSdkEncoder *)encoder{
    if (!_encoder) {
        _encoder = [[HMMQTTSdkEncoder alloc]init];
    }
    return _encoder;
}

+ (instancetype)manager {
    static HMMqttManager *mqtt = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        mqtt = [HMMqttManager new];
    });
    return mqtt;
}

#pragma mark -- 基础操作、

- (void)initSDK {
    [[HJMqttManager manager] initMQTT];
    [HJMqttManager manager].delegate = self;
}

- (void)close {
    [[HJMqttManager manager] close];
}

- (BOOL)connectWithHost:(NSString *)host port:(UInt32)port {
    return [[HJMqttManager manager] connectWithHost:host port:port];
}

- (void)disconnect {
    [[HJMqttManager manager] disconnect];
}

- (void)subscribeWithHmDevice:(HMDevice *)hmDevice andHmMqttError:(hmMqttError)hmMqttError{
    [[HJMqttManager manager] subscribeWithHmDevice:hmDevice andHjMqttError:^(NSError *error){hmMqttError(error);}];
}
- (void)subscribeWithHmDevice:(HMDevice *)hmDevice{
    [[HJMqttManager manager] subscribeWithHmDevice:hmDevice];
}

- (void)subscribeLastWordsWithHmDevice:(HMDevice *)hmDevice andHmMqttError:(hmMqttError)hmMqttError{
    [[HJMqttManager manager] subscribeLastWordsWithHmDevice:hmDevice andHjMqttError:^(NSError *error) {hmMqttError(error);}];
}
- (void)subscribeLastWordsWithHmDevice:(HMDevice *)hmDevice {
    [[HJMqttManager manager] subscribeLastWordsWithHmDevice:hmDevice];
}

- (void)unsubscribeWithHmDevice:(HMDevice *)hmDevice andHmMqttError:(hmMqttError)hmMqttError{
    [[HJMqttManager manager] unsubscribeWithHmDevice:hmDevice andHjMqttError:^(NSError *error) {hmMqttError(error);}];
}
- (void)unsubscribeWithHmDevice:(HMDevice *)hmDevice{
    [[HJMqttManager manager] unsubscribeWithHmDevice:hmDevice];
}

/** 发布消息 */

- (void)publishWithData:(NSData *)data onHmDevice:(HMDevice *)hmDevice andHmMqttError:(hmMqttError)hmMqttError{
    [[HJMqttManager manager] publishWithData:data onHmDevice:hmDevice andHjMqttError:^(NSError *error){hmMqttError(error);}];
}

- (void)publishWithData:(NSData *)data onHmDevice:(HMDevice *)hmDevice{
    [[HJMqttManager manager] publishWithData:data onHmDevice:hmDevice];
}

#pragma mark -------------------- 发布Mqtt消息 + 编码--------------------------------


/**
 获取密钥

 @param hmDevice     设备的相关属性 （具体可根据 HMDevice这个类的注解、文档、Demo进行操作
 @param success      返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)getSecretKeyWithHmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError coderErrorBlock:(hmCoderError)error{
    NSData * data = [self.encoder getSecretKeyWithDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}

/**
 获取设备的版本信息

 @param hmDevice     设备的相关属性
 @param success      返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void) getDeviceEditionInformationWithHmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError coderErrorBlock:(hmCoderError)error{
    NSData *data = [self.encoder  getEditionDataWithDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}

/**
 获取网关的参数信息
 
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void) getGatewayParametersWithHmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData * data = [self.encoder getGatewayInfoWithDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 设置网关的参数信息

 @param gatewayInfo  网关的参数信息
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void) setGatewayParametersWithInfo:(HMGatewayModel *)gatewayInfo HmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData *data = [self.encoder setGatewayInfo:gatewayInfo andDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}



/**
 设置时区
 
 @param hmDevice     设备的相关属性（包含时区）（具体可根据 HMDevice这个类的注解、文档、Demo进行操作）
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void) setTimerZoneWithHmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData *data = [self.encoder setTimerZoneWithDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 设置网关ip

 @param ip           ip地址
 @param hmDevice     设备的相关属性（具体可根据 HMDevice这个类的注解、文档、Demo进行操作）
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)setGatewayIp:(NSString *)ip hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
     NSData * data = [self.encoder setGatewayIP:ip  andDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 子设备入网

 @param enable       是否允许入网  YES / NO
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)addSubDevice:(BOOL)enable hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData * data = [self.encoder addSubDevice:enable andDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}



/**
 删除子设备

 @param subIndex     子设备index
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)deleteSubDeviceWithIndex:(NSInteger)subIndex hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
     NSData * data = [self.encoder deleteSubDevice:subIndex andDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 固件升级

 @param fType        值0x01,为wifi固件；值0x02,为ZigBee协调器固件；值0x03,为ZigBee子设备固件；值0x04,为声音升级
 @param enable       2表示允许更新，否则不允许更新 device 设备属性
 @param zType        设备类型当升级设备类型为zigbee子设备有时效。
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)updateFirmwareWithDeviceType:(NSInteger) fType enable:(Boolean)enable zigBeeType:(NSInteger)zType hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
     NSData * data = [self.encoder upDatairmware:fType enable:enable type:zType andDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
};


/**
 设置联动小夜灯设备

 @param subList      子设备的index列表
 @param enable       01使能,00禁能；
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)setLinkNightLightWithSubList:(NSArray *)subList enable:(BOOL)enable hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData * data = [self.encoder setLinkNightLightWithSubList:subList enable:enable andDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 设置网关在家庭布防模式下报警设备

 @param sublist      子设备的index列表
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)setHomeDefenseWithSubDeviceList:(NSArray *)sublist hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData * data = [self.encoder setWashSubListWithSubList:sublist andDevice:hmDevice];
     [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 一键控制ZIGBEE灯

 @param onoff        1控制zigbee灯全开（若为0则控制zigbee灯全关）
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)setLightSwitchWithonoff:(int)onoff hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error {
    NSData * data = [self.encoder setLightOnoffWithSwitch:onoff andDevice:hmDevice];
    [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}

/**
 获取撤、布防、在家布防定时器信息

 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)getAlarmTimerInformationWithHmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
     NSData * data = [self.encoder getAlarmTimerWithDevice:hmDevice];
     [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 设置撤、布防、在家布防定时器

 @param type         1为在家布放 2为外出布放 0撤防
 @param hmTimer      海曼定时器
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)setAlarmTimerWithWitType:(NSInteger)type andHmTimer:(HMTimer *)hmTimer hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error {
    NSData * data = [self.encoder setAlarmTimerWithType:type andDevice:hmDevice andHmTimer:hmTimer];
     [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}

/**
 获取子设备数据

 @param subIndex     子设备Index索引
 @param cmd          设备属性 参考:Enum.h 文件 --宏
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)getSubDeviceInfoWithSubIndex:(NSInteger)subIndex andCmd:(NSInteger)cmd hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData * data = [self.encoder getSubDevice:hmDevice andIndex:subIndex andCmd:cmd];
     [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 设置子设备属性

 @param type         设备类型 参考:Enum.h 文件
 @param subIndex     设备索引 device 设备属性(服务器获取)
 @param object       设备信息 ：子设备对象的各项属性，参考classModel各对象
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
- (void)setDevicePropertyWithSubDeviceType:(DEVICE_TYPE)type subIndex:(NSInteger)subIndex deviceInfo:(NSObject *) object hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData * data = [self.encoder setDevicePropertyWithIndex:type deviceIndex:subIndex deviceInfo:object andDevice:hmDevice];
     [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}


/**
 获取ZB设备单项状态值

 @param index        子设备Index索引
 @param number       子设备属性下标 参考协议
 @param hmDevice     设备的相关属性
 @param success      mqtt返回消息回调
 @param hmMqttError  Mqtt相关错误码回调
 @param error        参数信息错误码回调
 */
-(void)getZBDeviceSingleStateAndSubIndex:(NSInteger)index andNumber:(NSInteger)number hmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    NSData * data = [self.encoder getZBDeviceSingleStateandDevice:hmDevice andIndex:index andNumber:number];
     [self mqttMessageTransport:hmDevice data:data successBlock:^(id data) {success(data);} hmMqttError:^(NSError *error) {hmMqttError(error);} errorBlock:^(NSInteger fault) {error(fault);}];
}



- (void)mqttMessageTransport:(HMDevice *)hmDevice data:(NSData *)data successBlock:(Call1BackBlcok)success hmMqttError:(hmMqttError)hmMqttError errorBlock:(hmCoderError)error{
    [[HJMqttManager manager] publishWithData:data onHmDevice:hmDevice andHjMqttError:^(NSError *error) {
        hmMqttError(error);
    }];
    self.dataComplete = ^(id info){
        HMMQTTSdkDecoder *decoder = [[HMMQTTSdkDecoder alloc]init];
        [decoder baseDecoderWith:hmDevice andData:info successBlock:^(id message) {

            success(message);
        } errorBlock:^(NSInteger fault){
            error(fault);
        }];
    };
}

#pragma mark -- HJMQTTManagerDelegate
//@property (nonatomic, copy) void (^dataComplete) (id data);
- (void)mqttNewMessageData:(NSData *)data{
    
    NSString *result = [HmUtils hexStringFromData:data];
    if ([result isEqualToString:@"330f"]) {
        if ([self.delegate respondsToSelector:@selector(mqttNewMessageData:)]) {
            [self.delegate mqttNewMessageData:YES];
        }
    }else if ([result isEqualToString:@"3321"]){
        if ([self.delegate respondsToSelector:@selector(mqttNewMessageData:)]) {
            [self.delegate mqttNewMessageData:NO];
        }
    }else{
        if(self.dataComplete){
            self.dataComplete(data);
        }
    }
}

//- (void)mqttNewMessagAndHmDevice:(HMDevice *)hmDevice successBlock:(Call1BackBlcok)success{
//    
//    self.dataComplete = ^(id data){
//        HMMQTTSdkDecoder *decoder = [[HMMQTTSdkDecoder alloc]init];
//        [decoder baseDecoderWith:hmDevice andData:data successBlock:^(id message) {
//            success(message);
//        } errorBlock:^(NSInteger error){}];
//    };
//}

- (void)mqttDidConnect {
    if ([self.delegate respondsToSelector:@selector(mqttDidConnect)]) {
        [self.delegate mqttDidConnect];
    }
}

- (void)mqttDidConnectionClosed {
    if ([self.delegate respondsToSelector:@selector(mqttDidConnectionClosed)]) {
        [self.delegate mqttDidConnectionClosed];
    }
}





@end
