//
//  HMHttpManage.m
//  HmMqttSdk
//
//  Created by 研发ios工程师 on 2017/12/22.
//  Copyright © 2017年 mac. All rights reserved.
//

#define HMHTTP_MAN_URL(remainURL) ([NSString stringWithFormat:@"%@%@", host,remainURL]) // URL拼接

#import "HMHttpManage.h"
#import "HMHttpTool.h"
#import "HmUtils.h"
#import "Enum.h"

NSString * const host = @"http://47.88.192.21:80/SmartHome";
NSString * const HM_LOGIN                     = @"/v1/login";//登录
NSString * const HM_REGISTER_MAIL             = @"/register/v1/mail";//注册邮箱
NSString * const HM_REGISTER_PHONE            = @"/v1/register/phone";//注册手机
NSString * const HM_FORGET_MAIL               = @"/v1/register/phone";//忘记密码EMAIL

NSString * const HM_CHANGE_USRE_INFO          = @"/v1/info/updateMsg";//更新用户信息
NSString * const HM_CHANGE_USRE_PROPERTY      = @"/v1/user/{userId}/property";//获取用户扩展属性
NSString * const HM_CHANGE_USRE_SINGLE_PROPERTY      = @"/v1/user/{user_id}/property/{key}";//获取用户单项扩展属性
NSString * const HM_CHANGE_USRE_DELETE_PROPERTY      = @"/v2/user/{user_id}/property/{key}";//删除用户扩展属性
NSString * const HM_CHANGE_USRE_SET_PROPERTY      = @"/v1/user/{userId}/property";//设置/修改 用户扩展属性
NSString * const HM_FLUSH_TOKEN               = @"/v1/flushToken";//刷新调用凭证
NSString * const HM_SCENE_CREATE              = @"/v1/scene/create";//创建场景
NSString * const HM_SCENE_EZECUTE             = @"/v1/scene/execute/{sceneId}";//执行场景
NSString * const HM_SCENE_DELECE              = @"/v1/scene/{sceneID}";//场景删除
NSString * const HM_SCENE_GET                 = @"/v1/scene/{sceneID}";//查询单个场景
NSString * const HM_LINK_CREATE               = @"/v1/link/create";//创建联动
NSString * const HM_LINK_DELECE               = @"/v1/link/{linkID}";//删除联动
NSString * const HM_LINK_GET                  = @"/v1/link/{linkID}";//获取联动
NSString * const HM_LINK_LINKEABLE            = @"/v1/link/enable";//联动使能
NSString * const HM_OTA_GETMSG                = @"/v1/ota/getMsg";//查询升级列表、查询固件升级信息
NSString * const HM_REGISTER_DEVICE           = @"/v1/device/register";//注册设备
NSString * const HM_SUBSCRIBE_DEVICE          = @"/v1/device/{userId}/subscribe/{deviceId}";//用户绑定设备
NSString * const HM_UNSUBSCRIBE_DEVICE        = @"/v1/device/{userId}/unsubscribe/{deviceId}";//用户解除绑定设备
NSString * const HM_GET_DEVICES               = @"/v1/device/subscribe/{userId}/devices";//用户WIFI设备列表
NSString * const HM_GET_SUB_DEVICE            = @"/v1/device/subscribe/{deviceId}/subs";//用户子设备列表
NSString * const HM_EDIT_DEVICE               = @"/v1/device/edit";//修改设备信息
NSString * const HM_EDIT_SUBDEVICE               = @"/v1/device/edit";//修改子设备信息
NSString * const HM_OTA_CONFIRM               = @"/v1/ota/{deviceId}/confirm/{otaId}";//用户确认设备升级
NSString * const HM_GET_OTA_NEW_VERSION       = @"/v1/ota/newest_version";//用户获取设备关联产品的最新版本
NSString * const HM_GET_DEVICE_USER_LIST      = @"/v1/device/subscribe_users/{deviceId}";//获取设备用户列表

NSString * const HM_GET_REGISTER_XGPUSH      = @"/v1/user/{userId}/XG_register";//推送信鸽token注册
NSString * const HM_GET_UNREGISTER_XGPUSH     = @"/v1/user/{userId}/XG_unregiste";//用户取消信鸽推送服务


//NSString * const COMPANY_ID                   = @"1000";//企业ID
//增加一个void xcode类型检查会更加严谨
NSString *  ACCESSTOKEN (void){
    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
    return [defaults objectForKey:@"HM_access_token"];
}                                                                          //设备AccessToken
NSString *  userId(void) {
    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
    return [defaults objectForKey:@"HM_userID"];
}                                                                          //用户ID//获取设备用户列表

@implementation HMHttpManage

//-(NSString *)ACCESSTOKEN{
//    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
//    return [defaults objectForKey:@"HM_access_token"];
//}

#pragma mark 用户类接口
/**
 * 用户登录
 * @param user         用户账号
 * @param password     用户密码
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)userLoginWithUser:(NSString *)user password:(NSString *)password success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSDictionary *paramsDic = [NSDictionary dictionary];
    if (![HmUtils isEmptyString:user] && ![HmUtils isEmptyString:password]) {
        if ([HmUtils isValidateEmail:user]) {
            paramsDic = @{@"mailbox":user,
                          @"password":password,
                          @"enterpriseId": COMPANY_ID
                          };
        }else{
            paramsDic = @{@"mobilePhone":user,
                          @"password":password,
                          @"enterpriseId":COMPANY_ID
                          };
        }
    }
    [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(HM_LOGIN) parameters:paramsDic success:^(id responseObject) {
            NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        if ([dic valueForKey:@"access_token"]) {
            NSString * access_token = [dic valueForKey:@"access_token"];
            NSString * userid = [NSString stringWithFormat:@"%@",[dic valueForKey:@"userId"]];
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            [defaults setObject:access_token forKey:@"HM_access_token"];
            [defaults setObject:userid forKey:@"HM_userID"];
            [defaults synchronize];
        }
        success(dic);
    } failure:^(NSError *error) {
        failure(error);
    }];
}

/**
 * 用户注册
 *
 * @param user         用户账号
 * @param password     用户密码
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onRegisterWithUser:(NSString *)user password:(NSString *)password success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSDictionary *paramsDic = [NSDictionary dictionary];
    NSString * url = [NSString string];
    if (![HmUtils isEmptyString:user] && ![HmUtils isEmptyString:password]) {
        if ([HmUtils isValidateEmail:user]) {
            url = HMHTTP_MAN_URL(HM_REGISTER_MAIL );
            paramsDic = @{@"mailbox":user,
                          @"password":password,
                          @"enterpriseId": COMPANY_ID
                          };
        }else{
            url = HMHTTP_MAN_URL(HM_REGISTER_PHONE);
            paramsDic = @{@"mobilePhone":user,
                          @"password":password,
                          @"enterpriseId": @1
                          };
        }
    }
    [[HMHttpTool manager] postDataWithUrl:url parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 忘记密码
 * @param user         用户账号
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onForgetPasswordWithUser:(NSString *)user success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSDictionary *paramsDic = [NSDictionary dictionary];
    NSString * url = [NSString string];
    if (![HmUtils isEmptyString:user]) {
        if ([HmUtils isValidateEmail:user]) {
            url = HMHTTP_MAN_URL(HM_REGISTER_MAIL );
            paramsDic = @{@"mailbox":user,
                          @"enterpriseId": COMPANY_ID
                          };
        }else{
            url = HMHTTP_MAN_URL(HM_REGISTER_PHONE);
            paramsDic = @{@"mobilePhone":user,
                          @"enterpriseId": COMPANY_ID
                          };
        }
    }
    [[HMHttpTool manager] postDataWithUrl:url parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 刷新凭证
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)refreshTokenSuccess:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    [[HMHttpTool manager] getDataWithUrl:HMHTTP_MAN_URL(HM_FLUSH_TOKEN) parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


/**
 * 获取用户扩展属性
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)getUserExtendPropertyAndSuccess:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSString * Url = [HMHTTP_MAN_URL(HM_CHANGE_USRE_PROPERTY ) stringByReplacingOccurrencesOfString:@"{userId}" withString:userId()];
    [[HMHttpTool manager] getDataWithUrl:Url parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 获取用户单个扩展属性
 * @param key          用户属性的key
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)getUserSingleExtendPropertyAndKey:(NSString *)key Success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSString * Url0 = [HMHTTP_MAN_URL(HM_CHANGE_USRE_SINGLE_PROPERTY) stringByReplacingOccurrencesOfString:@"{userId}" withString:userId()];
     NSString * Url = [Url0 stringByReplacingOccurrencesOfString:@"{key}" withString:key];
    [[HMHttpTool manager] getDataWithUrl:Url parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 删除用户扩展属性
 * @param key          用户属性的key
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)deleteUserExtendPropertyAndKey:(NSString *)key Success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSString * Url0 = [HMHTTP_MAN_URL(HM_CHANGE_USRE_DELETE_PROPERTY) stringByReplacingOccurrencesOfString:@"{user_id}" withString:userId()];
    NSString * Url = [Url0 stringByReplacingOccurrencesOfString:@"{key}" withString:key];
    [[HMHttpTool manager] deleteDataWithUrl:Url parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


/**
 * 设置/修改 用户扩展属性
 * @param perpertyDic   用户属性的字典
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)changeExtendPropertyAndPorperty:(NSDictionary *)perpertyDic Success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSString * Url = [HMHTTP_MAN_URL(HM_CHANGE_USRE_SET_PROPERTY) stringByReplacingOccurrencesOfString:@"{userId}" withString:userId()];
    [[HMHttpTool manager] deleteDataWithUrl:Url parameters:perpertyDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 修改用户信息
 * @param userInfo     用户信息
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)upChangeInfoWithUserInfo:(HMUserInfoModel *)userInfo success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSMutableDictionary * paramsDic = [NSMutableDictionary dictionary];
    if (userInfo.userId != 0) {
        NSString * userId = [[NSString alloc] initWithFormat:@"%d",(int)userInfo.userId];
        [paramsDic setObject:userId forKey:@"id"];
    }
    if (![HmUtils isEmptyString:userInfo.nickName]) {
        [paramsDic setObject:userInfo.nickName forKey:@"nickName"];
    }
    if (userInfo.age != 0) {
        NSString * age   = [[NSString alloc] initWithFormat:@"%d",(int)userInfo.age];
        [paramsDic setObject:age forKey:@"age"];
    }
    if (userInfo.sex != 0) {
        NSString * sex   = [[NSString alloc] initWithFormat:@"%d",(int)userInfo.sex];
        [paramsDic setObject:sex  forKey:@"sex"];
    }
    if (![HmUtils isEmptyString:userInfo.country]) {
        [paramsDic setObject:userInfo.nickName forKey:@"country"];
    }
    if (![HmUtils isEmptyString:userInfo.provice]) {
        [paramsDic setObject:userInfo.provice forKey:@"province"];
    }
    if (![HmUtils isEmptyString:userInfo.city]) {
        [paramsDic setObject:userInfo.city forKey:@"city"];
    }
    if (![HmUtils isEmptyString:userInfo.avatar]) {
        [paramsDic setObject:userInfo.city forKey:@"avatar"];
    }
    NSLog(@"%@",paramsDic);
     [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(HM_CHANGE_USRE_INFO) parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

#pragma mark 场景类接口
/**
 * 创建场景
 * @param sceneName    场景名称
 * @param sceneIcon    场景图标地址
 * @param countTime    延迟时间
 * @param execList     [
 *                     {
 *                     "deviceId": "* 设备ID",
 *                     "subIndex": "子设备index",
 *                     "dataEndpoint":
 *                     {
 *                     "key": "value",
 *                     "key": "value"
 *                     },
 *                     "data": ""
 *                     }
 *                     ]
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onSceneCreateWithSceneName:(NSString *)sceneName sceneIcon:(NSString *)sceneIcon countTime:(NSString *)countTime execList:(NSArray *)execList success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSInteger time= [countTime integerValue];
    NSMutableDictionary * dict = [NSMutableDictionary dictionary];
    [dict setValue:sceneName forKey:@"sceneName"];
    [dict setValue:sceneIcon forKey:@"sceneIcon"];
    [dict setValue:@(time) forKey:@"countTime"];
    [dict setValue:execList forKey:@"execList"];
//    NSDictionary *paramsDic = @{
//                              @"sceneName" :sceneName,
//                              @"sceneIcon" :sceneIcon ,
//                              @"countTime" :countTime,
//                              @"execList"  :execList
//                               };
    [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(HM_SCENE_CREATE) parameters:dict success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 执行场景
 * @param sceneID      场景ID
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onSceneExecuteWithSceneID:(NSString *)sceneID success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
//     NSString *str1 = [url stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
    
    if(sceneID ==nil || sceneID < 0){
        return;
    }
    NSString *url = [HMHTTP_MAN_URL(HM_SCENE_EZECUTE) stringByReplacingOccurrencesOfString:@"{sceneId}" withString:sceneID];
    
    
    [[HMHttpTool manager] postDataWithUrl:url parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}



/**
 * 删除场景
 * @param sceneID      场景ID
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onSceneDeleceWithSceneID:(NSString *)sceneID success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    if(sceneID ==nil || sceneID < 0){
        return;
    }
    NSString *url = [HMHTTP_MAN_URL(HM_SCENE_DELECE) stringByReplacingOccurrencesOfString:@"{sceneId}" withString:sceneID];
    [[HMHttpTool manager] deleteDataWithUrl:url header:ACCESSTOKEN() parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


/**
 * 获取单个场景内容
 *
 * @param sceneID      联动ID
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onSceneGetIDWithSceneID:(NSString *)sceneID  success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    if(sceneID ==nil || sceneID < 0){
        return;
    }
    NSString *url = [HMHTTP_MAN_URL(HM_SCENE_DELECE) stringByReplacingOccurrencesOfString:@"{sceneID}" withString:sceneID];
    [[HMHttpTool manager] postDataWithUrl:url parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


/**
 * 创建联动
 *
 * @param linkName     联动名称
 * @param checkEn      联动使能
 * @param countTime    延迟时间
 * @param conList      {
 *                     "* type": 0,
 *                     "deviceId": 135113,
 *                     "subId": 135113,
 *                     "dataEndpoint":{
 *                     "key": "value",
 *                     "key": "value",
 *                     },
 *                     "data": ""
 *                     "TS":"1999-12-03 14:22:55"
 *                     "WF": 255
 *                     }
 * @param checkList    [{
 *                     "type": 0,
 *                     "deviceId": 135113,
 *                     "subIndex": 135113,
 *                     "dataEndpoint": {
 *                     "key": "value",
 *                     "key": "value"
 *                     }
 *                     "data": ""
 *                     "TS": "1999-12-03 14:22:55"
 *                     "TE":"1999-12-03 14:22:55"
 *                     "WF": 255
 *                     }]
 * @param execList     [{
 *                     "type": 0,
 *                     "sceneID": "场景ID",
 *                     "deviceID": "设备ID",
 *                     "subID": "子设备ID",
 *                     "dataEndpoint": {
 *                     "key": "value",
 *                     "key": "value"
 *                     }
 *                     "data": ""
 *                     }]
 * @param success      成功回调
 * @param failure      失败回调
 */
+ (void)onLinkCreateWithLinkName:(NSString *)linkName checkEn:(NSString *)checkEn countTime:(NSString *)countTime conList:(NSString *)conList checkList:(NSString *)checkList execList:(NSString *)execList success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSDictionary * paramsDic = @{
                      @"linkName"  :linkName,
                      @"checkEn"   :checkEn,
                      @"countTime" :countTime,
                      @"conList"   :conList,
                      @"execList"  :execList,
                      @"checkList" :checkList
                      };
    [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(HM_LINK_CREATE) parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


/**
 * 删除联动场景
 * @param linkID      场景ID
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onLinkDeleceWithLinkID:(NSString *)linkID success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSString *url = [HMHTTP_MAN_URL(HM_LINK_DELECE) stringByReplacingOccurrencesOfString:@"{sceneId}" withString:linkID];
    [[HMHttpTool manager] deleteDataWithUrl:url header:ACCESSTOKEN() parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


/**
 * 查询单个场景联动
 *
 * @param linkID       联动ID
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onLinkGetIDWithLinkID:(NSString *)linkID success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    NSString *url = [HMHTTP_MAN_URL(HM_LINK_GET) stringByReplacingOccurrencesOfString:@"{sceneId}" withString:linkID];
    [[HMHttpTool manager] getDataWithUrl:url header:ACCESSTOKEN() parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 联动使能
 *
 * @param success      成功回调
 * @param failure      失败回调
 */
+ (void)onLinkEnableAndSuccess:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    [[HMHttpTool manager] getDataWithUrl:HMHTTP_MAN_URL(HM_LINK_LINKEABLE) header:ACCESSTOKEN() parameters:@{@"id":@1,@"linkEn":@"ture"} success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

#pragma mark 设备类接口
/**
* OTA查询升级列表
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onOtaGetMsgWithPid:(NSString *)pid deviceID:(NSString *)deviceID info:(NSString *)info  type:(NSString *)type success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSDictionary * paramsDic = @{
                              @"pid"       : pid,
                              @"deviceID"  : deviceID ,
                              @"info"      : info,
                              @"type"      : type
                              };
    [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(HM_OTA_GETMSG) parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


/**
 * 注册设备到服务器
 *
 * @param pid         产品id
 * @param mac         设备mac
 * @param mcuVersion  设备版本号
 * @param wifiVersion WiFi设备版本号
 * @param name        设备名称
 */

+ (void)onRegisterDeviceWithPid:(NSString *)pid mac:(NSString *)mac mcuVersion:(NSString *)mcuVersion wifiVersion:(NSString *)wifiVersion name:(NSString *)name success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    NSMutableDictionary * paramsDic = [NSMutableDictionary dictionary];
    [paramsDic setObject:pid forKey:@"productId"];
    [paramsDic setObject:COMPANY_ID  forKey:@"enterpriseId"];
    [paramsDic setObject:mac forKey:@"mac"];
    if (![HmUtils isEmptyString:mcuVersion]) {
        [paramsDic setObject:mcuVersion forKey:@"mcuVersion"];
    }
    if (![HmUtils isEmptyString:wifiVersion]) {
        [paramsDic setObject:wifiVersion forKey:@"wifiVersion"];
    }
    if (![HmUtils isEmptyString:name]) {
        [paramsDic setObject:name forKey:@"name"];
    }
    [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(HM_REGISTER_DEVICE) parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 绑定设备
 *
 * @param deviceId     设备ID
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onSubscribeDeviceWithDeviceId:(NSString * )deviceId success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    NSString * Url = [NSString string];
    if (![HmUtils isEmptyString:deviceId]) {
        NSString *url = [HMHTTP_MAN_URL(HM_SUBSCRIBE_DEVICE) stringByReplacingOccurrencesOfString:@"{userId}" withString:userId()];
         Url = [url stringByReplacingOccurrencesOfString:@"{deviceId}" withString:deviceId];
    }
    [[HMHttpTool manager] postDataWithUrl:Url parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


/**
 * 解除绑定设备
 *
 * @param deviceId     设备ID
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onUnSubscribeDeviceWithDeviceId:(NSString *)deviceId success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSString * Url = [NSString string];
    if (![HmUtils isEmptyString:deviceId]) {
        NSString *url = [HMHTTP_MAN_URL(HM_SUBSCRIBE_DEVICE) stringByReplacingOccurrencesOfString:@"{userId}" withString:userId()];
        Url = [url stringByReplacingOccurrencesOfString:@"{deviceId}" withString:deviceId];
    }
    [[HMHttpTool manager] postDataWithUrl:Url parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 获取WiFi设备列表
 *
 * @param offset       请求的偏移量 默认为0
 * @param limit        请求的数量上限 默认为100
 * @param success      成功回调
 * @param failure      失败回调
 */
+ (void)getWiFDeviceslistWithOffset:(NSString *)offset limit :(NSString *)limit success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSMutableDictionary * paramsDic = [NSMutableDictionary dictionary];
    if (![HmUtils isEmptyString:offset] && ![HmUtils isEmptyString:limit] ) {
        [paramsDic setObject:offset forKey:@"offset"];
        [paramsDic setObject:limit  forKey:@"limit" ];
    }
    NSString * str = HM_GET_DEVICES;
    NSString * strUrl = [str stringByReplacingOccurrencesOfString:@"{userId}" withString:userId()];
    [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(strUrl) parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 获取子设备列表
 *
 * @param offset       请求的偏移量 默认为0
 * @param limit        请求的数量上限 默认为100
 * @param deviceId     设备ID
 * @param success      成功回调
 * @param failure      失败回调
 */
+ (void)getSubDevicesWithOffset:(NSString *)offset limit:(NSString *)limit andDeviceId:(NSString *)deviceId success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSString * deviceID = [NSString stringWithFormat:@"%@",deviceId];
    NSDictionary *paramsDic = [NSDictionary dictionary];
    if (![HmUtils isEmptyString:offset] && ![HmUtils isEmptyString:limit] ) {
        paramsDic = @{@"offset" : offset,@"limit": limit};
    }
    NSString * Url = [HMHTTP_MAN_URL(HM_GET_SUB_DEVICE) stringByReplacingOccurrencesOfString:@"{deviceId}" withString:deviceID];
    [[HMHttpTool manager] postDataWithUrl:Url parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 修改设备信息
 *
 * @param name       设备名称
 * @param deviceId   设备ID
 * @param success    成功回调
 * @param failure    失败回调
 */
+ (void)onChangeDeviceWithName:(NSString *)name deviceId:(NSInteger)deviceId success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSMutableDictionary * paramsDic = [NSMutableDictionary dictionary];
    NSString * deviceID = [NSString stringWithFormat:@"%d",(int)deviceId];
    if (deviceId >= 0) {
        [paramsDic setObject:deviceID forKey:@"deviceId"];
    }
    if (![HmUtils isEmptyString:name]) {
        [paramsDic setObject:name forKey:@"name"];
    }
    [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(HM_EDIT_DEVICE) parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
    NSString * Url = [HMHTTP_MAN_URL(HM_EDIT_DEVICE) stringByReplacingOccurrencesOfString:@"{deviceId}" withString:deviceID ];
    [[HMHttpTool manager] postDataWithUrl:Url parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 修改子设备信息
 *
 * @param name       设备名称
 * @param deviceId   设备ID
 * @param subIndex   子设备下的index
 * @param success    成功回调
 * @param failure    失败回调
 */
+ (void)onChangeSubDeviceWithName:(NSString *)name deviceId:(NSInteger )deviceId subIndex:(NSInteger )subIndex  success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSMutableDictionary * paramsDic = [NSMutableDictionary dictionary];
    NSString * deviceID = [NSString stringWithFormat:@"%d",(int)deviceId];
    NSString * subIndex0 = [NSString stringWithFormat:@"%d",(int)subIndex];
    if (![HmUtils isEmptyString:name]) {
        [paramsDic setObject:name forKey:@"name"];
    }
    if (subIndex >= 0) {
        [paramsDic setObject:subIndex0 forKey:@"subIndex"];
    }
    NSString * Url = [HMHTTP_MAN_URL(HM_EDIT_DEVICE) stringByReplacingOccurrencesOfString:@"{deviceId}" withString:deviceID ];
    [[HMHttpTool manager] postDataWithUrl:Url parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 用户确认设备升级
 *
 * @param otaId        升级ID
 * @param deviceId     设备ID
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onUserConfirmWithOtaId:(NSString *)otaId deviceId:(NSInteger )deviceId success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    NSString * deviceID = [NSString stringWithFormat:@"%d",(int)deviceId];
    NSString * Url0 = [HMHTTP_MAN_URL(HM_OTA_CONFIRM) stringByReplacingOccurrencesOfString:@"{deviceId}" withString:deviceID];
    NSString * Url = [Url0 stringByReplacingOccurrencesOfString:@"{otaId}" withString:otaId];
    [[HMHttpTool manager] postDataWithUrl:Url parameters:nil success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 用户获取设备关联产品的最新版本
 *
 * @param deviceIdList        父设备产品id列表
 * @param subDeviceInfoList        子设备id列表 [{"id": 子设备id, "pId": 子设备产品id} {"id": 子设备id, "pId": 子设备产品id}]
 * @param success         成功回调
 * @param failure         失败回调
 */
+ (void)onGetUserDevicesNewEditWitDeviceIdList:(NSArray *)deviceIdList andSubDeviceInfoList:(NSArray *)subDeviceInfoList success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{

    NSMutableDictionary * paramDic = [NSMutableDictionary dictionary];
    if (![HmUtils isEmptyArray:deviceIdList]) {
        [paramDic setObject:deviceIdList forKey:@"father"];
    }
    if (![HmUtils isEmptyArray:subDeviceInfoList]) {
        [paramDic setObject:deviceIdList forKey:@"sub"];
    }
    [[HMHttpTool manager] postDataWithUrl:HMHTTP_MAN_URL(HM_GET_OTA_NEW_VERSION) parameters:paramDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

#pragma mark 信鸽推送类接口
/**
 * 推送信鸽token注册
 *
 * @param appId        应用ID
 * @param deviceToken  信鸽推送凭证
 * @param success      成功回调
 * @param failure      失败回调
 */

+ (void)onRegisterXGWithAppId:(NSString *)appId deviceToken:(NSString *)deviceToken success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSMutableDictionary * paramsDic = [NSMutableDictionary dictionary];
        [paramsDic setObject:appId forKey:@"app_id"];
        [paramsDic setObject:deviceToken forKey:@"device_token"];
    NSString * Url = [HMHTTP_MAN_URL(HM_GET_REGISTER_XGPUSH) stringByReplacingOccurrencesOfString:@"{userId}" withString:userId()];
    [[HMHttpTool manager] postDataWithUrl:Url parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}

/**
 * 注销推送信鸽token注册
 *
 * @param appId        应用ID
 * @param success      成功回调
 * @param failure      失败回调
 */
+ (void)onUnRegisterXGWithAppId:(NSString *)appId success:(void (^)(id data))success failure:(void (^)(NSError * error))failure{
    
    NSMutableDictionary * paramsDic = [NSMutableDictionary dictionary];
    [paramsDic setObject:appId forKey:@"app_id"];
    NSString * Url = [HMHTTP_MAN_URL(HM_GET_UNREGISTER_XGPUSH) stringByReplacingOccurrencesOfString:@"{userId}" withString:userId()];
    [[HMHttpTool manager] postDataWithUrl:Url parameters:paramsDic success:^(id responseObject) {success(responseObject);} failure:^(NSError *error) {failure(error);}];
}


@end
