//
//  SubDeviceViewController.m
//  MQTTHJ
//
//  Created by 研发ios工程师 on 2018/1/4.
//  Copyright © 2018年 研发ios工程师. All rights reserved.
//

#import "SubDeviceViewController.h"

@interface SubDeviceViewController ()<HMMQTTDelegate>

@property (nonatomic, strong) NSDictionary * dict;
@property (nonatomic, strong) NSString *  productId;
@property (nonatomic, strong) NSString *  subIndex;
@property (nonatomic, strong) HMMQTTSdkEncoder * encoder;
@property (nonatomic, strong) HMDevice *  hmDevice;
@property (nonatomic, strong) NSString * macName;

@end

@implementation SubDeviceViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.encoder = [[HMMQTTSdkEncoder alloc]init];
    self.hmDevice = [[HMDevice alloc]init];
    self.encoder = [[HMMQTTSdkEncoder alloc]init];
    [HMMqttManager manager].delegate = self;
    self.hmDevice.pid = 1000;
    self.hmDevice.factoryID = 10000;
    self.hmDevice.acckey = MQTT_ACCKEY;
    self.hmDevice.aeskey = [[NSUserDefaults standardUserDefaults] valueForKey:@"hmdevice_aeskey"];
}

- (void)configureWithData:(id)data {
    self.dict = data[@"dict"];
   
    self.productId = [self.dict valueForKey:@"productId"];
    self.subIndex  = [self.dict valueForKey:@"subIndex"];
    self.macName = [data valueForKey:@"wifiMacName"];
    self.hmDevice.deviceMac = self.macName;
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [[HMMqttManager manager] subscribeLastWordsWithHmDevice:self.hmDevice andHmMqttError:^(NSError *error) {
                if (error) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [self.view makeToast:@"订阅失败"];
                    });
                }else{
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [self.view makeToast:@"订阅成功"];
                    });
                }
            }] ;
        });
    });
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [[HMMqttManager manager] subscribeWithHmDevice:self.hmDevice andHmMqttError:^(NSError *error) {
                if (error) {
                    NSLog(@"订阅主题失败");
                }else{
                    NSLog(@"订阅主题成功");
                }
            }] ;
        });
    });
}

- (void)subscribeTopicWithHmDevice:(HMDevice *)hmDevice{
   
    HMDevice * hmDevice = [[HMDevice alloc]init];
    hmDevice.pid = 1111;
    hmDevice.factoryID = 11111;
    hmDevice.deviceMac = @"xxxxxxxxxx";
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [[HMMqttManager manager] subscribeLastWordsWithHmDevice:self.hmDevice andHmMqttError:^(NSError *error) {
                if (error) {
                     NSLog(@"订阅遗言失败");
                }else{
                     NSLog(@"订阅遗言成功");
                }
            }] ;
        });
    });
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [[HMMqttManager manager] subscribeWithHmDevice:self.hmDevice andHmMqttError:^(NSError *error) {
                if (error) {
                    NSLog(@"订阅主题失败");
                }else{
                    NSLog(@"订阅主题成功");
                }
            }] ;
        });
    });
}

- (void)getSecretKeyInformation{
    [[HMMqttManager manager] getSecretKeyWithHmDevice:self.hmDevice successBlock:^(id data) {
        NSLog(@"%@",data);
    } hmMqttError:^(NSError *error) {
        NSLog(@"%@",error.description);
    } coderErrorBlock:^(NSInteger fault) {
        NSLog(@"%ld",(long)fault);
    }];
}

- (void)mqttNewMessageData:(BOOL)isOnline{
    if (isOnline == YES) {
        [self.view makeToast:@"设备上线了"];
        self.navigationItem.title = @"网关在线";
    }else{
        [self.view makeToast:@"设备离线了"];
        self.navigationItem.title = @"网关离线";
    }
}

- (IBAction)senMqtt:(id)sender {
    [self setSubDeviceWithProductId:self.productId andSubIndex:self.subIndex];
}

-(void)setSubDeviceWithProductId:(NSString *)productId andSubIndex:(NSString *)subIndex{
    NSInteger deviceId = [productId  integerValue];
    NSInteger index = [subIndex integerValue];
    switch (deviceId) {
        case DEVICE_TYPE_ZIGBEE_RGB:
            NSLog(@"rgb");
            [self RGBAndIndex:index];
            break;
        case DEVICE_TYPE_ZIGBEE_ONE_ONOFF:
            NSLog(@"1onoff");
            break;
        case DEVICE_TYPE_ZIGBEE_TWO_ONOFF:
            NSLog(@"2onoff");
            [self twoOnoffAndIndex:index];
            break;
        case DEVICE_TYPE_ZIGBEE_THREE_ONOFF:
            NSLog(@"3onoff");
            break;
        case DEVICE_TYPE_ZIGBEE_RELAY:
            NSLog(@"RELAY");
            break;
        case DEVICE_TYPE_ZIGBEE_FOUR_WHEEL:
            NSLog(@"FOUR_WHEEL");
            break;
        case DEVICE_TYPE_ZIGBEE_SOUND_AND_LIGHT_ALARM:
            NSLog(@"SOUND_AND_LIGHT_ALARM");
            break;
        case DEVICE_TYPE_ZIGBEE_THP:
            NSLog(@"THP");
            break;
        case DEVICE_TYPE_ZIGBEE_METRTING_PLUGIN:
            NSLog(@"METRTING_PLUGIN");
            [self metringPlugAndIndex:index];
            break;
        case DEVICE_TYPE_ZIGBEE_PLUGIN:
            NSLog(@"PLUGIN");
            [self mPlugAndIndex:index];
            break;
        default:
            break;
    }
}

- (void)mPlugAndIndex:(NSInteger)index{

}

- (void)metringPlugAndIndex:(NSInteger)index{

}


- (void)RGBAndIndex:(NSInteger )index{
    HMRgbLight * rgb = [[HMRgbLight alloc]init];
    rgb.colorR = 1;
    rgb.colorG = 1;
    rgb.colorB = 230;
//    NSData * data = [self.encoder setDevicePropertyWithIndex:1 deviceIndex:index deviceInfo:rgb andDevice:self.hmDevice];
//    [[HMMqttManager manager] publishWithData:data onHmDevice:self.hmDevice];
}

//二开测试
- (void)twoOnoffAndIndex:(NSInteger )index{
//    NSData * data = [self.encoder getSubDevice:self.hmDevice andIndex:index andCmd:GW_SUB_SE_GET];
//    [[HMMqttManager manager] publishWithData:data onHmDevice:self.hmDevice];
}

- (void)dealloc {
    [HMMqttManager manager].delegate = nil;
    [[HMMqttManager manager] unsubscribeWithHmDevice:self.hmDevice andHmMqttError:^(NSError *error) {
    }];
}


@end
