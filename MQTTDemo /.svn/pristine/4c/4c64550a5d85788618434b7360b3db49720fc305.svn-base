//
//  HmUtils.m
//  HmMqttSdk
//
//  Created by mac on 2017/11/29.
//  Copyright © 2017年 mac. All rights reserved.
//

#import "HmUtils.h"

@implementation HmUtils

// 验证手机号和密码是否符合规则
+ (BOOL) validPhone:(NSString*)phone {
    NSString *regex = @"^[1][234578][0-9]{9}$";
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regex];
    return [predicate evaluateWithObject:phone];
}

//利用正则表达式验证
+ (BOOL)isValidateEmail:(NSString *)email {
    NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    return [emailTest evaluateWithObject:email];
}

//判断字符串是否无效
+(BOOL)isEmptyString:(NSString *)string{
    if (string == nil || string.length == 0) {
        return YES;
    }else{
        return NO;
    }
}
//判断数组是否为空
+(BOOL)isEmptyArray:(NSArray *)array{
    
    if (array != nil && ![array isKindOfClass:[NSNull class]] && array.count != 0){
        return NO;
    }else{
        return YES;
    }
}
// 读取某一个字节
+ (Boolean)readFlagsBit:(Byte)byte andIndex:(NSInteger)index{
    if (index > 7) {
        return false;
    }else{
        int temp = byte << (7  - index);
        temp >>= 7;
        temp &= 1;
        if (temp == 1) {
            return  true;
        }else{
            return false;
        }
    }
}
/**
 * 2进制数组转换成长整型
 * @param byteNum 数据
 */
+ (long)bytes2long:(Byte *)byteNum{
    long num = 0;
    for (int i = 0; i < 8; i++) {
        num <<= 8;
        num |= (byteNum[i] & 0xff);
    }
    return num;
}
/**
 * mac转换String数组
 *
 * @param byte mac的byte
 */
+ (NSString *)mac2String:(Byte *)byte{
    return  [NSString stringWithFormat:@"%02X%02X%02X%02X%02X%02X%02X%02X",byte[0],byte[1],byte[2],byte[3],byte[4],byte[5],byte[6],byte[7]];
}


//byte数组转int
+ (int)intLength:(Byte []) value {

    if (value[0] != 0 && value[1] != 0) {
        return (value[0] & 0xff) << 8 | (value[1] & 0xff);
    } else {
        return 0;
    }
}

/**
 * byte转整形
 */
+ (int)intType:(Byte) value {
    return value & 0xff;
}

+ (int)bytesToInt2:(Byte *)src{
    
    int value = (src[0] & 255) << 24 | (src[1] & 255) << 16 | (src[2] & 255) << 8 | (src[3] & 255);
    return value;
}


+(int) lBytesToInt:(Byte *) byte
{
    if ( byte[0] != 0 && byte[1] != 0) {
        return ( byte[0] & 0xff) << 8 | ( byte[1] & 0xff);
    } else {
        return 0;
    }
}
//data   ： <845dd768 14c6>    怎么转成这样的    字符串：845DD76814C6
+ (NSString *) hexStringFromData:(NSData*)data{
    return [[[[NSString stringWithFormat:@"%@",data]
              stringByReplacingOccurrencesOfString: @"<" withString: @""]
             stringByReplacingOccurrencesOfString: @">" withString: @""]
            stringByReplacingOccurrencesOfString: @" " withString: @""];
}

//NSString转NSData
+ (NSData *) hexToBytes:(NSString *)str
{
    NSMutableData* data = [NSMutableData data];
    int idx;
    for (idx = 0; idx+2 <= str.length; idx+=2) {
        NSRange range = NSMakeRange(idx, 2);
        NSString* hexStr = [str substringWithRange:range];
        NSScanner* scanner = [NSScanner scannerWithString:hexStr];
        unsigned int intValue;
        [scanner scanHexInt:&intValue];
        [data appendBytes:&intValue length:1];
    }
    return data;
}
//  十进制转二进制
- (NSString *) toBinarySystemWithDecimalSystem:(int)num length:(int)length
{
    int remainder = 0;      //余数
    int divisor = 0;        //除数
    
    NSString * prepare = @"";
    
    while (true)
    {
        remainder = num%2;
        divisor = num/2;
        num = divisor;
        prepare = [prepare stringByAppendingFormat:@"%d",remainder];
        
        if (divisor == 0)
        {
            break;
        }
    }
    //倒序输出
    NSString * result = @"";
    for (int i = length -1; i >= 0; i --)
    {
        if (i <= prepare.length - 1) {
            result = [result stringByAppendingFormat:@"%@",
                      [prepare substringWithRange:NSMakeRange(i , 1)]];
            
        }else{
            result = [result stringByAppendingString:@"0"];
            
        }
    }
    return result;
}
//  二进制转十进制
- (NSString *) toDecimalWithBinary:(NSString *)binary
{
    int ll = 0 ;
    int  temp = 0 ;
    for (int i = 0; i < binary.length; i ++)
    {
        temp = [[binary substringWithRange:NSMakeRange(i, 1)] intValue];
        temp = temp * powf(2, binary.length - i - 1);
        ll += temp;
    }
    
    NSString * result = [NSString stringWithFormat:@"%d",ll];
    
    return result;
}

//16进制和2进制互转
- (NSString *) getBinaryByhex:(NSString *)hex binary:(NSString *)binary
{
    NSMutableDictionary  *hexDic = [[NSMutableDictionary alloc] init];
    hexDic = [[NSMutableDictionary alloc] initWithCapacity:16];
    [hexDic setObject:@"0000" forKey:@"0"];
    [hexDic setObject:@"0001" forKey:@"1"];
    [hexDic setObject:@"0010" forKey:@"2"];
    [hexDic setObject:@"0011" forKey:@"3"];
    [hexDic setObject:@"0100" forKey:@"4"];
    [hexDic setObject:@"0101" forKey:@"5"];
    [hexDic setObject:@"0110" forKey:@"6"];
    [hexDic setObject:@"0111" forKey:@"7"];
    [hexDic setObject:@"1000" forKey:@"8"];
    [hexDic setObject:@"1001" forKey:@"9"];
    [hexDic setObject:@"1010" forKey:@"a"];
    [hexDic setObject:@"1011" forKey:@"b"];
    [hexDic setObject:@"1100" forKey:@"c"];
    [hexDic setObject:@"1101" forKey:@"d"];
    [hexDic setObject:@"1110" forKey:@"e"];
    [hexDic setObject:@"1111" forKey:@"f"];
    
    NSMutableString *binaryString=[[NSMutableString alloc] init];
    if (hex.length) {
        for (int i=0; i<[hex length]; i++) {
            NSRange rage;
            rage.length = 1;
            rage.location = i;
            NSString *key = [hex substringWithRange:rage];
            [binaryString appendString:hexDic[key]];
        }
        
    }else{
        for (int i=0; i<binary.length; i+=4) {
            NSString *subStr = [binary substringWithRange:NSMakeRange(i, 4)];
            int index = 0;
            for (NSString *str in hexDic.allValues) {
                index ++;
                if ([subStr isEqualToString:str]) {
                    [binaryString appendString:hexDic.allKeys[index-1]];
                    break;
                }
            }
        }
    }
    return binaryString;
}
//int转NSData
- (NSData *) setId:(int)Id
{
    //用4个字节接收
    Byte bytes[4];
    bytes[0] = (Byte)(Id>>24);
    bytes[1] = (Byte)(Id>>16);
    bytes[2] = (Byte)(Id>>8);
    bytes[3] = (Byte)(Id);
    NSData *data = [NSData dataWithBytes:bytes length:4];
    return data;
}
- (NSData *) set2Id:(int)Id
{
    //用2个字节接收
    Byte bytes[2];
    bytes[0] = (Byte)(Id>>8);
    bytes[1] = (Byte)(Id);
    NSData *data = [NSData dataWithBytes:bytes length:2];
    return data;
}

////4字节表示的int
//NSData *intData = [data subdataWithRange:NSMakeRange(2, 4)];
//int value = CFSwapInt32BigToHost(*(int*)([intData bytes]));//655650
////2字节表示的int
//NSData *intData = [data subdataWithRange:NSMakeRange(4, 2)];
//int value = CFSwapInt16BigToHost(*(int*)([intData bytes]));//290
////1字节表示的int
//char *bs = (unsigned char *)[[data subdataWithRange:NSMakeRange(5, 1) ] bytes];
//int value = *bs;//34

//没有三个字节转int的方法，这里补充一个通用方法
- (unsigned)parseIntFromData:(NSData *)data
{
    
    NSString *dataDescription = [data description];
    NSString *dataAsString = [dataDescription substringWithRange:NSMakeRange(1, [dataDescription length]-2)];
    
    unsigned intData = 0;
    NSScanner *scanner = [NSScanner scannerWithString:dataAsString];
    [scanner scanHexInt:&intData];
    return intData;
}

// 字典转json字符串方法

+(NSString *)convertToJsonData:(NSDictionary *)dict

{
    
    NSError *error;
    
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict options:NSJSONWritingPrettyPrinted error:&error];
    
    NSString *jsonString;
    
    if (!jsonData) {
        
        NSLog(@"%@",error);
        
    }else{
        
        jsonString = [[NSString alloc]initWithData:jsonData encoding:NSUTF8StringEncoding];
        
    }
    
    NSMutableString *mutStr = [NSMutableString stringWithString:jsonString];
    
    NSRange range = {0,jsonString.length};
    
    //去掉字符串中的空格
    
    [mutStr replaceOccurrencesOfString:@" " withString:@"" options:NSLiteralSearch range:range];
    
    NSRange range2 = {0,mutStr.length};
    
    //去掉字符串中的换行符
    
    [mutStr replaceOccurrencesOfString:@"\n" withString:@"" options:NSLiteralSearch range:range2];
    
    return mutStr;
    
}


@end
