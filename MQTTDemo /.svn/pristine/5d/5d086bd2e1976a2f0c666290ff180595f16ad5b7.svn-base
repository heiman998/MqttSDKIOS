//
//  HMMqttManager.m
//  HmMqttSdk
//
//  Created by 研发ios工程师 on 2018/1/4.
//  Copyright © 2018年 mac. All rights reserved.
//

#import "HMMqttManager.h"
#import "HJMqttManager.h"

@interface HMMqttManager () <HJMQTTManagerDelegate>

@end

@implementation HMMqttManager

+ (instancetype)manager {
    static HMMqttManager *mqtt = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        mqtt = [HMMqttManager new];
    });
    return mqtt;
}

#pragma mark -- 基础操作、

- (void)initSDK {
    
    [[HJMqttManager manager] initMQTT];
    [HJMqttManager manager].delegate = self;
}

- (void)close {
    [[HJMqttManager manager] close];
}

- (BOOL)connectWithHost:(NSString *)host port:(UInt32)port {
    return [[HJMqttManager manager] connectWithHost:host port:port];
}

- (void)disconnect {
    [[HJMqttManager manager] disconnect];
}

- (void)subscribeWithHmDevice:(HMDevice *)hmDevice andHmMqttError:(hmMqttError)hmMqttError{
    [[HJMqttManager manager] subscribeWithHmDevice:hmDevice andHjMqttError:^(NSError *error){hmMqttError(error);}];
}
- (void)subscribeWithHmDevice:(HMDevice *)hmDevice{
    [[HJMqttManager manager] subscribeWithHmDevice:hmDevice];
}

- (void)subscribeLastWordsWithHmDevice:(HMDevice *)hmDevice andHmMqttError:(hmMqttError)hmMqttError{
    [[HJMqttManager manager] subscribeLastWordsWithHmDevice:hmDevice andHjMqttError:^(NSError *error) {hmMqttError(error);}];
}
- (void)subscribeLastWordsWithHmDevice:(HMDevice *)hmDevice {
    [[HJMqttManager manager] subscribeLastWordsWithHmDevice:hmDevice];
}

- (void)unsubscribeWithHmDevice:(HMDevice *)hmDevice andHmMqttError:(hmMqttError)hmMqttError{
    [[HJMqttManager manager] unsubscribeWithHmDevice:hmDevice andHjMqttError:^(NSError *error) {hmMqttError(error);}];
}
- (void)unsubscribeWithHmDevice:(HMDevice *)hmDevice{
    [[HJMqttManager manager] unsubscribeWithHmDevice:hmDevice];
}

/** 发布消息 */

- (void)publishWithData:(NSData *)data onHmDevice:(HMDevice *)hmDevice andHmMqttError:(hmMqttError)hmMqttError{
    [[HJMqttManager manager] publishWithData:data onHmDevice:hmDevice andHjMqttError:^(NSError *error){hmMqttError(error);}];
}

- (void)publishWithData:(NSData *)data onHmDevice:(HMDevice *)hmDevice{
    [[HJMqttManager manager] publishWithData:data onHmDevice:hmDevice];
}

#pragma mark -- HJMQTTManagerDelegate

- (void)mqttNewMessageData:(NSData *)data{
    if ([self.delegate respondsToSelector:@selector(mqttNewMessageData:)]) {
        [self.delegate mqttNewMessageData:data];
    }
}

- (void)mqttDidConnect {
    if ([self.delegate respondsToSelector:@selector(mqttDidConnect)]) {
        [self.delegate mqttDidConnect];
    }
}

- (void)mqttDidConnectionClosed {
    if ([self.delegate respondsToSelector:@selector(mqttDidConnectionClosed)]) {
        [self.delegate mqttDidConnectionClosed];
    }
}

@end
